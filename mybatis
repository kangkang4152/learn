package com.huawei.it.jalor5.core.base;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.core.type.TypeReference;
import com.huawei.it.jalor5.core.log.ILogger;
import com.huawei.it.jalor5.core.log.JalorLoggerFactory;
import com.huawei.it.jalor5.core.util.CollectionUtil;
import com.huawei.it.jalor5.core.util.JsonUtil;
import com.huawei.it.jalor5.core.util.PatternUtil;
import com.huawei.it.jalor5.core.util.StringUtil;

import javax.persistence.Transient;
import javax.xml.bind.annotation.XmlRootElement;
import javax.xml.bind.annotation.XmlTransient;
import java.io.IOException;
import java.io.Serializable;
import java.util.ArrayList;
import java.util.List;
/**
 * 分页VO
 * @author l54883
 * @since 2011-8-25
 */
@XmlRootElement
@JsonIgnoreProperties(ignoreUnknown=true,value={"filters"})
public final class PageVO implements Serializable{
	private static final long serialVersionUID = 1112199160788845959L;
	private static ILogger log = JalorLoggerFactory.getLogger(PageVO.class);
	/**
	 * 总的行数
	 */
	private int totalRows;
	/**
	 * 当前页
	 */
	private int curPage = 1;
	/**
	 * 每页条数，默认15
	 */
	private int pageSize = PageConfig.DEFAULT.getDefaultPageSize();
	/**
	 * 结果模式，配合PageInterceptor使用，为0或未赋值时同时取结果集与记录总数，为1时只取记录总数，为2时只取结果集
	 */
	private int resultMode;
	
	@Transient
	private int startIndex;
	@Transient
	private int endIndex;
	
	/**
	 * 分页表达式
	 */
	private String orderBy; 
	private String filterStr; 
	private List<FilterVO> filters = new ArrayList<FilterVO>();

	
	/**
	 * @return startIndex
	 */
	public int getStartIndex() {
		return  startIndex == 0 ? (curPage-1)*pageSize+1 : startIndex; 
	}
	
	/** 
	 * 设置startIndex，用于滚动分页
	 * @param startIndex
	 */
	@XmlTransient 
	public void setStartIndex(int startIndex){
		this.startIndex = startIndex;
	}
 
	/**
	 * @return endIndex
	 */
	@Transient
	public int getEndIndex() {
		if(endIndex - startIndex > PageConfig.DEFAULT.getMaxPageSize()) {
			log.error("The endIndex param is too large, default page size will be used. You can modify the MaxPageSize use the following method: PageConfig.DEFAULT.setMaxPageSize() .");
			return startIndex + PageConfig.DEFAULT.getDefaultPageSize();
		}

		// 修复当endIndex大于totalRows时，查询出的数据错误的问题
		return endIndex == 0 ? curPage*pageSize : (endIndex - 1 > totalRows ? totalRows : endIndex);
	}
	
	/** 
	 * 设置endIndex，用于滚动分页
	 * @param endIndex
	 */
	@XmlTransient 
	public void setEndIndex(int endIndex){
		this.endIndex = endIndex;
	}
	
	/**
	 * @return totalRows
	 */
	public int getTotalRows() {
		return totalRows;
	}
	/**
	 * @param totalRows 要设置的 totalRows
	 */
	public void setTotalRows(int totalRows) {
		this.totalRows = totalRows;
	}
	/**
	 * @return curPage
	 */
	public int getCurPage() {
		return curPage;
	}
	/**
	 * @param curPage 要设置的 curPage
	 */
	public void setCurPage(int curPage) {
		this.curPage = curPage;
	}
	/**
	 * @return pageSize
	 */
	public int getPageSize() {
		return pageSize;
	}
	/**
	 * @param pageSize 要设置的 pageSize
	 */
	public void setPageSize(int pageSize) {
		if(pageSize <=0 || pageSize > PageConfig.DEFAULT.getMaxPageSize()) {
			log.error("The pageSize param is too large, default page size will be used. You can modify the MaxPageSize use the following method: PageConfig.DEFAULT.setMaxPageSize() ..");
			return;
		}
		this.pageSize = pageSize;
	}

	public int getResultMode() {
		return resultMode;
	}

	public void setResultMode(int resultMode) {
		this.resultMode = resultMode;
	}

	/**
	 * @return orderBy，需要进行安全性过滤
	 */
	public String getOrderBy() {
		return orderBy;
	}

	/**
	 * 设置Order by表达式，本方法会针对参数进行正则检验，仅允许字母、数字、空格、下划线、点、逗号这些字符，校验不通过时设置 orderBy 为"1"
	 * @param orderBy 要设置的 orderBy
	 */
	public void setOrderBy(String orderBy) {		
		if(! StringUtil.isNullOrEmpty(orderBy) && !PatternUtil.SQL_ORDER_BY.matcher(orderBy).matches()){
			log.warn("Dangerous order by pattern detected. It will be ignore ");
			this.orderBy = "1";	
			return ;
		}		
		
		this.orderBy = orderBy;
	}
	
	 
	/**
	 * @return
	 */
	public List<FilterVO> getFilters() {
		//如果filters为null 并且 filterstr不为空 那么再转换
		if(!CollectionUtil.isNullOrEmpty(filters) || StringUtil.isNullOrEmpty(getFilterStr())
				//只个判断是 代表前台没有传递筛选
				|| "[]".equals(getFilterStr())){
			return filters;
		}
		TypeReference<List<FilterVO>> type = new TypeReference<List<FilterVO>>(){};
		try {
			filters = JsonUtil.stringToObject(getFilterStr(), type);
		} catch (IOException e) {
			log.error(e);
		}
		return filters;
	}

	/**
	 * @param filters
	 */
	public void setFilters(List<FilterVO> filters) {
		
		this.filters = filters;
	}

	public String getFilterStr() {
		return filterStr;
	}

	public void setFilterStr(String filterStr) {
		this.filterStr = filterStr;
	}

	/**
	 * @return totalPages
	 */
	public int getTotalPages() {
		return  totalRows%pageSize == 0 ? totalRows/pageSize:totalRows/pageSize+1;
	}
}


package com.huawei.it.jalor5.core.base;

import java.io.IOException;
import java.io.Serializable;
import java.util.ArrayList;
import java.util.List;

import javax.persistence.Transient;
import javax.xml.bind.annotation.XmlRootElement;
import javax.xml.bind.annotation.XmlTransient;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.core.type.TypeReference;
import com.huawei.it.jalor5.core.log.ILogger;
import com.huawei.it.jalor5.core.log.JalorLoggerFactory;
import com.huawei.it.jalor5.core.util.CollectionUtil;
import com.huawei.it.jalor5.core.util.JsonUtil;
import com.huawei.it.jalor5.core.util.PatternUtil;
import com.huawei.it.jalor5.core.util.StringUtil;
/**
 * 分页VO
 * @author l54883
 * @since 2011-8-25
 */
@XmlRootElement
@JsonIgnoreProperties(ignoreUnknown=true,value={"filters"})
public final class DbPageBean implements Serializable{
	
	private static final long serialVersionUID = 1112199160788845959L;
	
	private static ILogger log = JalorLoggerFactory.getLogger(DbPageBean.class);
	
	/**
	 * 总的行数
	 */
	private int totalRows;
	/**
	 * 当前页
	 */
	private int curPage = 1;
	/**
	 * 每页条数，默认15
	 */
	private int pageSize = PageConfig.DEFAULT.getDefaultPageSize();
	/**
	 * 结果模式，配合PageInterceptor使用，为0或未赋值时同时取结果集与记录总数，为1时只取记录总数，为2时只取结果集
	 */
	private int resultMode;
	/**
	 * 分页表达式
	 */
	private String orderBy; 
	
	private String filterStr; 
	
	private List<FilterVO> filters = new ArrayList<FilterVO>();
	

	@Transient
	private int startIndex;
	@Transient
	private int endIndex;
	@Transient
	private int mysqlStartIndex;
	@Transient
	private int mysqlEndIndex;
	
	private int from;
	private int mfrom;
	

	private int to;
	private int mto;

	/**
	 * @return startIndex
	 */
	public int getStartIndex() {
		return  startIndex == 0 ? (curPage-1)*pageSize+1 : startIndex; 
	}
	
	/** 
	 * 设置startIndex，用于滚动分页
	 * @param startIndex
	 */
	@XmlTransient 
	public void setStartIndex(int startIndex){
		this.startIndex = startIndex;
	}
 
	/**
	 * @return endIndex
	 */
	@Transient
	public int getEndIndex() {
		if(endIndex - startIndex > PageConfig.DEFAULT.getMaxPageSize()) {
			log.error("The endIndex param is too large, default page size will be used. You can modify the MaxPageSize use the following method: PageConfig.DEFAULT.setMaxPageSize() .");
			return startIndex + PageConfig.DEFAULT.getDefaultPageSize();
		}

		// 修复当endIndex大于totalRows时，查询出的数据错误的问题
		//return endIndex == 0 ? curPage*pageSize : (endIndex - 1 > totalRows ? totalRows : endIndex);

		//修复在使用分页功能时存在不查询总条数情况next下一页查询方式,会设置pagevo.setResultMode(2)方式进行分页数据查询的问题
		return endIndex == 0 ? curPage*pageSize : endIndex;
	}
	
	/** 
	 * 设置endIndex，用于滚动分页
	 * @param endIndex
	 */
	@XmlTransient 
	public void setEndIndex(int endIndex){
		this.endIndex = endIndex;
	}
	
	/**
	 * @return totalRows
	 */
	public int getTotalRows() {
		return totalRows;
	}
	/**
	 * @param totalRows 要设置的 totalRows
	 */
	public void setTotalRows(int totalRows) {
		this.totalRows = totalRows;
	}
	/**
	 * @return curPage
	 */
	public int getCurPage() {
		return curPage;
	}
	/**
	 * @param curPage 要设置的 curPage
	 */
	public void setCurPage(int curPage) {
		this.curPage = curPage;
	}
	/**
	 * @return pageSize
	 */
	public int getPageSize() {
		return pageSize;
	}
	/**
	 * @param pageSize 要设置的 pageSize
	 */
	public void setPageSize(int pageSize) {
		if(pageSize <=0 || pageSize > PageConfig.DEFAULT.getMaxPageSize()) {
			log.error("The pageSize param is too large, default page size will be used. You can modify the MaxPageSize use the following method: PageConfig.DEFAULT.setMaxPageSize() ..");
			return;
		}
		this.pageSize = pageSize;
	}

	public int getResultMode() {
		return resultMode;
	}

	public void setResultMode(int resultMode) {
		this.resultMode = resultMode;
	}

	/**
	 * @return orderBy，需要进行安全性过滤
	 */
	public String getOrderBy() {
		return orderBy;
	}

	/**
	 * 设置Order by表达式，本方法会针对参数进行正则检验，仅允许字母、数字、空格、下划线、点、逗号这些字符，校验不通过时设置 orderBy 为"1"
	 * @param orderBy 要设置的 orderBy
	 */
	public void setOrderBy(String orderBy) {		
		if(! StringUtil.isNullOrEmpty(orderBy) && !PatternUtil.SQL_ORDER_BY.matcher(orderBy).matches()){
			log.warn("Dangerous order by pattern detected. It will be ignore ");
			this.orderBy = "1";	
			return ;
		}		
		
		this.orderBy = orderBy;
	}
	
	 
	/**
	 * @return
	 */
	public List<FilterVO> getFilters() {
		//如果filters为null 并且 filterstr不为空 那么再转换
		if(!CollectionUtil.isNullOrEmpty(filters) || StringUtil.isNullOrEmpty(getFilterStr())
				//只个判断是 代表前台没有传递筛选
				|| "[]".equals(getFilterStr())){
			return filters;
		}
		TypeReference<List<FilterVO>> type = new TypeReference<List<FilterVO>>(){};
		try {
			filters = JsonUtil.stringToObject(getFilterStr(), type);
		} catch (IOException e) {
			log.error(e);
		}
		return filters;
	}

	/**
	 * @param filters
	 */
	public void setFilters(List<FilterVO> filters) {
		
		this.filters = filters;
	}

	public String getFilterStr() {
		return filterStr;
	}

	public void setFilterStr(String filterStr) {
		this.filterStr = filterStr;
	}

	/**
	 * @return totalPages
	 */
	public int getTotalPages() {
		return  totalRows%pageSize == 0 ? totalRows/pageSize:totalRows/pageSize+1;
	}

	public int getMysqlStartIndex() {
		return  mysqlStartIndex == 0 ? (curPage-1)*pageSize : mysqlStartIndex;
	}

	public void setMysqlStartIndex(int mysqlStartIndex) {
		this.mysqlStartIndex=mysqlStartIndex;
	}

	@Transient
	public int getMysqlEndIndex() {
		if(mysqlEndIndex - mysqlStartIndex > PageConfig.DEFAULT.getMaxPageSize()) {
			log.error("The endIndex param is too large, default page size will be used. You can modify the MaxPageSize use the following method: PageConfig.DEFAULT.setMaxPageSize() .");
			return mysqlStartIndex + PageConfig.DEFAULT.getDefaultPageSize();
		}
		return mysqlEndIndex == 0 ? curPage*pageSize : (mysqlEndIndex - 1 > totalRows ? totalRows : mysqlEndIndex);
	}

	public void setMysqlEndIndex(int mysqlEndIndex) {
		this.mysqlEndIndex = mysqlEndIndex;
	}
	
	
	
	
	public int getFrom() {
		return  from == 0 ? (curPage-1)*pageSize+1 : from; 
	}

	public void setFrom(int from) {
		this.from = from;
	}
	
	public int getTo() {
		if(to - from > PageConfig.DEFAULT.getMaxPageSize()) {
			log.error("The endIndex param is too large, default page size will be used. You can modify the MaxPageSize use the following method: PageConfig.DEFAULT.setMaxPageSize() .");
			return from + PageConfig.DEFAULT.getDefaultPageSize();
		}

		// 修复当endIndex大于totalRows时，查询出的数据错误的问题
		return to == 0 ? curPage*pageSize : (to - 1 > totalRows ? totalRows : to);
	}

	public  void setTo(int to) {
		this.to = to;
	}
	
	public int getMfrom() {
		return  mfrom == 0 ? (curPage-1)*pageSize : mfrom;
	}

	public void setMfrom(int mfrom) {
		this.mfrom=mfrom;
	}
	
	
	public int getMto() {
		if(mto - mfrom > PageConfig.DEFAULT.getMaxPageSize()) {
			log.error("The endIndex param is too large, default page size will be used. You can modify the MaxPageSize use the following method: PageConfig.DEFAULT.setMaxPageSize() .");
			return mfrom + PageConfig.DEFAULT.getDefaultPageSize();
		}
		return mto == 0 ? curPage*pageSize : (mto - 1 > totalRows ? totalRows : mto);
	}

	public void setMto(int mto) {
		this.mto = mto;
	}
}


package com.huawei.it.jalor5.core.base;

import java.io.Serializable;
import java.util.List;

import javax.xml.bind.annotation.XmlRootElement;

/**
 * 分页结果对象
 * @author l54883
 * @since 2011-8-26
 */
@XmlRootElement
public class PagedResult<T> implements Serializable {
	
	private static final long serialVersionUID = 3511759640725963728L;
	private PageVO pageVO;
	
	private List<T> result;
	
	public PagedResult() {
	}
	
	/**
	 * 创建PagedResult
	 * @param pageVO 分页VO，必须具有totalRows参数
	 * @param result 结果
	 */	
	public PagedResult(PageVO pageVO, List<T> result) {
		this.pageVO = pageVO;
		this.result = result;		
	}
	/**
	 * @return pageVO
	 */
	public PageVO getPageVO() {
		return pageVO;
	}
	/**
	 * @return result
	 */
	public List<T> getResult() {
		return result;
	}

	/**
	 * @param pageVO
	 */
	public void setPageVO(PageVO pageVO) {
		this.pageVO = pageVO;
	}

	/**
	 * @param result
	 */
	public void setResult(List<T> result) {
		this.result = result;
	}
	 
}



package com.huawei.it.jalor5.core.orm;

import java.sql.Connection;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.*;

import org.apache.ibatis.executor.Executor;
import org.apache.ibatis.executor.statement.StatementHandler;
import org.apache.ibatis.logging.Log;
import org.apache.ibatis.logging.LogFactory;
import org.apache.ibatis.logging.jdbc.ConnectionLogger;
import org.apache.ibatis.mapping.BoundSql;
import org.apache.ibatis.mapping.MappedStatement;
import org.apache.ibatis.plugin.Interceptor;
import org.apache.ibatis.plugin.Intercepts;
import org.apache.ibatis.plugin.Invocation;
import org.apache.ibatis.plugin.Plugin;
import org.apache.ibatis.plugin.Signature;
import org.apache.ibatis.session.Configuration;
import org.apache.ibatis.session.ResultHandler;
import org.apache.ibatis.session.RowBounds;

import com.huawei.it.jalor5.core.base.DbPageBean;
import com.huawei.it.jalor5.core.base.PageVO;
import com.huawei.it.jalor5.core.base.PagedResult;
import com.huawei.it.jalor5.core.log.ILogger;
import com.huawei.it.jalor5.core.log.JalorLoggerFactory;
import org.springframework.util.Assert;

/**
 * 拦截处理类
 * 
 * 此类使用MyBatis的插件扩展机制， 拦截需要分页处理的sql， 包装结果并将其返回
 * 
 * @author Wugang KF22423
 */
@Intercepts({@Signature(type = Executor.class, method = "query", args = {MappedStatement.class, Object.class, RowBounds.class, ResultHandler.class})})
public class PageInterceptor implements Interceptor {
	
	private static final ILogger log = JalorLoggerFactory.getLogger(PageInterceptor.class);
	private static final Log statementLog = LogFactory.getLog(PageInterceptor.class);

	private static final int INDEX_MAPPED_STATEMENT = 0;

	private static final int INDEX_PARAMETER = 1;

	private static final int INDEX_ROW_BOUNDS = 2;

	private static final int INDEX_RESULT_HANDLER = 3;

	/**取结果集和记录总数 */
	private static final int RESULT_MODE_ALL = 0;
	/**只取记录总数 */
	private static final int RESULT_MODE_TOTALROWS = 1;
	/**只取结果集 */
	private static final int RESULT_MODE_DATASET = 2;
	
	/** 查询count的sql后缀 */
	private static final String COUNT_SQL_POST_FIX = "Count";

	/**
	 * 拦截方法
	 * 
	 * @param invocation
	 *            拦截目标对象
	 * @return 拦截后的结果
	 * @throws Throwable
	 */
	@SuppressWarnings({ "unchecked", "rawtypes" })
	public Object intercept(Invocation invocation) throws Throwable {
		Object[] queryArgs = invocation.getArgs();
		MappedStatement mappedStatement = (MappedStatement) queryArgs[INDEX_MAPPED_STATEMENT];
		String sqlId = mappedStatement.getId();
		Object tempParameter = queryArgs[INDEX_PARAMETER];
		
		
		PageVO pageVo = null;
		//判断是否存在PageVo,如果存在就替换
		if(tempParameter instanceof Map ){
			Map<Object, Object> parameterMap = (Map)tempParameter;
			for(Map.Entry<Object, Object> entry:parameterMap.entrySet()){
                if (entry.getValue() instanceof PageVO) {
					PageVO oldVo = (PageVO) entry.getValue();
					pageVo = oldVo;
					DbPageBean newVo = transferVo(oldVo);
					entry.setValue(newVo);
				}
			}
		}
		if(tempParameter instanceof PageVO){
			PageVO oldTempVo = (PageVO) tempParameter;
			pageVo = oldTempVo;
			DbPageBean newVo = transferVo(oldTempVo);
			queryArgs[INDEX_PARAMETER] = newVo;
		}
		Object parameter = queryArgs[INDEX_PARAMETER];
		DbPageBean dbBean = null;
		//检查 是否需要拦截 如果需要拦截 那么返回page对象
		dbBean = checkInvocation(sqlId,parameter);
		if(null == dbBean){
			return invocation.proceed();
		}
		// 拦截处理
		Executor executor = (Executor) invocation.getTarget();

		// 查询count处理，总数已经存在则不再获取
		if (((dbBean.getResultMode() == RESULT_MODE_ALL) && (dbBean.getTotalRows() == 0))
				|| (dbBean.getResultMode() == RESULT_MODE_TOTALROWS)) {
			queryCount(queryArgs, mappedStatement, sqlId, dbBean, executor);
		}
		// 查询结果集处理
		List resultList = null;
		//如果总数count >0  才去查询列表sql语句
		if (((dbBean.getResultMode() == RESULT_MODE_ALL) && (dbBean.getTotalRows() > 0))
				|| (dbBean.getResultMode() == RESULT_MODE_DATASET)) {
			// 查询结果集处理
			resultList = queryResultList(executor, mappedStatement, queryArgs);
			if (dbBean.getTotalRows()>0 && pageVo != null) {
				pageVo.setTotalRows(dbBean.getTotalRows());
			}
//			 twx481687 2018-06-04  end
		} else {
			//若未使用查询Count sql 则使用list sql的数据条数 hwx210974
			if(dbBean.getTotalRows()==0){
				if (((dbBean.getResultMode() == RESULT_MODE_ALL) && (dbBean.getTotalRows() == 0))
						|| (dbBean.getResultMode() == RESULT_MODE_TOTALROWS)) {
                    resultList = Collections.EMPTY_LIST;
				}else{
					resultList = queryResultList(executor, mappedStatement, queryArgs);
                    if (null == resultList) {
                        resultList = Collections.EMPTY_LIST;
                    }
					dbBean.setTotalRows(resultList.size());
				}
                Assert.notNull(pageVo, "pageVo is null");
				pageVo.setTotalRows(resultList.size());
			}
		}
		PagedResult pagedResult = new PagedResult();
		pagedResult.setPageVO(transferPageVo(dbBean));
		pagedResult.setResult(resultList);
		// 将PagedResult对象包装成list返回（MyBatis的查询结果，均为List）
		List<PagedResult> returnResultList = new ArrayList<PagedResult>();
		returnResultList.add(pagedResult);
		return returnResultList;
	}

	private DbPageBean  checkInvocation(String sqlId,Object parameter){
		// 如果参数对象为空，则不进行拦截处理
		if (null == parameter) {
			return null;
		}
		
		// 拦截条件：
		// 1.sqlId不能为特定的后缀（避免重复）;
		// 2.参数中有PageVO findPageVO 方法中判断
		if (null != sqlId && !sqlId.endsWith(COUNT_SQL_POST_FIX) ) {
				return findDbBean(parameter);
		}
		return null;
	}
	/** 
	 * 查询COUNT
	 * @author l54883
	 * @since 2012-6-11
	 * @param queryArgs
	 * @param mappedStatement
	 * @param sqlId
	 * @param pageVO
	 * @param executor
	 * @throws SQLException
	 */
	private void queryCount(Object[] queryArgs, MappedStatement mappedStatement, String sqlId, DbPageBean dbbean,
			Executor executor) throws SQLException {
		// 按命名规则,查count的sql为原sql ID + Count
		String queryCountSqlId = sqlId + COUNT_SQL_POST_FIX;
		Configuration configuration = mappedStatement.getConfiguration();
		
		// 重新构建查询count所需要的变量
		MappedStatement queryCountMs = configuration.getMappedStatement(queryCountSqlId);
		
		// modified by richard
		ProgramInterceptor pi = new ProgramInterceptor();
		MappedStatement newStatement = pi.buildMappedStatement(queryCountMs);
		
		// 查询count，并设置到pageVO中
		List queryCountList = queryResultList(executor, newStatement, queryArgs);
		int totalRows = Integer.parseInt(queryCountList.get(0).toString());
		dbbean.setTotalRows(totalRows);
	}
	
	/**
	 * 查询结果集处理
	 * @param executor
	 * @param mappedStatement
	 * @param queryArgs
	 * @return
	 * @throws SQLException
	 */
	private List queryResultList(Executor executor, MappedStatement mappedStatement, final Object[] queryArgs) throws SQLException {
		// 定义需要的变量
		final Object parameter = queryArgs[INDEX_PARAMETER];
		final RowBounds rowBounds = (RowBounds) queryArgs[INDEX_ROW_BOUNDS];
		ResultHandler resultHandler = (ResultHandler) queryArgs[INDEX_RESULT_HANDLER];
		Configuration configuration = mappedStatement.getConfiguration();
		BoundSql boundSql = mappedStatement.getBoundSql(parameter);
		// 查询出结果集，并设置到pageVO中
		StatementHandler handler = configuration.newStatementHandler(executor, mappedStatement, parameter, rowBounds,resultHandler, boundSql);
		
		Statement stmt = null; 
        List resultList = null;
		try{
			stmt = prepareStatement(executor, handler);
			resultList = handler.query(stmt, resultHandler);
            resultList = (resultList != null) ? resultList : Collections.EMPTY_LIST;
			return resultList;
		}catch(SQLException ex){	
			log.error(ex);
			//HW_CSPL_JAVA_Sensitive_Exception_Leak，敏感异常信息不能抛出，lwx722826,2019-07-29
			throw new RuntimeException("query resultList has sqlexception.");
		}finally{
			tryCloseStatement(stmt);
		}
	}

	/**
	 * 判断是否有 pageVO 参数 并返回对象
	 * @param pageVO
	 * @param parameter
	 * @return
	 */
	private DbPageBean findDbBean(Object parameter) {
		if(null == parameter ){
			return null;
		}
		//这个的情况比较多 优先执行这个代码
		if(parameter instanceof Map ){
			Map<Object, Object> parameterMap = (Map)parameter;
			for(Map.Entry<Object, Object> entry:parameterMap.entrySet()){
				if (entry.getValue() instanceof DbPageBean) {
					return (DbPageBean) entry.getValue();
				}
			}
		}
		//后面再考虑单个参数的问题
		if(parameter instanceof DbPageBean){
			return (DbPageBean) parameter;
		}
		return null;
	}

	/**
	 * 预处理Statement，并将其返回
	 * 
	 * @param executor
	 * @param handler
	 * @return
	 * @throws SQLException
	 */
	private Statement prepareStatement(Executor executor, StatementHandler handler) throws SQLException {
		Statement stmt = null;
		// 从Executor中获取事务的连接
        Connection connection = ConnectionLogger.newInstance(executor.getTransaction().getConnection(), statementLog, 0);
		
		// 预处理连接对象
		try{
            stmt = handler.prepare(connection, executor.getTransaction().getTimeout());
			handler.parameterize(stmt);
			return stmt;
		}catch(SQLException ex){
			tryCloseStatement(stmt);
			//HW_CSPL_JAVA_Sensitive_Exception_Leak，敏感异常信息不能抛出，lwx722826,2019-07-29
			throw new RuntimeException("prepare statement has sqlexception.");
		} catch(Exception e){
			log.error(e);
			return stmt;
		}
		
		
	}

	/** 
	 * 尝试关闭
	 * @param stmt
	 */
	private void tryCloseStatement(Statement stmt) {
		if(stmt != null){
			try{
				stmt.close();
			}catch(SQLException e){
				log.error(e);
			}
		}
	}

	/**
	 * 插件方法
	 * 
	 * @param target
	 */
	public Object plugin(Object target) {
		return Plugin.wrap(target, this);
	}

	/* (non-Javadoc)
	 * @see org.apache.ibatis.plugin.Interceptor#setProperties(java.util.Properties)
	 */
	public void setProperties(Properties arg0) {
	}
 
	
	/**
	 * 将PageVO转换成DbPageBean
	 * @param page
	 * @return
	 */
	private DbPageBean transferVo(PageVO page){
		DbPageBean bean = new DbPageBean();
		bean.setCurPage(page.getCurPage());
		bean.setPageSize(page.getPageSize());
		bean.setStartIndex(page.getStartIndex());
		bean.setEndIndex(page.getEndIndex());
		bean.setFilterStr(page.getFilterStr());
		bean.setFilters(page.getFilters());
		bean.setOrderBy(page.getOrderBy());
		bean.setTotalRows(page.getTotalRows());
		bean.setResultMode(page.getResultMode());
		return bean; 
	}
	/**
	 * 将DbPageBean转换成PageVO
	 * @param bean
	 * @return
	 */
	private PageVO transferPageVo(DbPageBean bean){
		PageVO page = new  PageVO();
		page.setCurPage(bean.getCurPage());
		page.setPageSize(bean.getPageSize());
		page.setFilterStr(bean.getFilterStr());
		page.setFilters(bean.getFilters());
		page.setOrderBy(bean.getOrderBy());
		page.setTotalRows(bean.getTotalRows());
		page.setResultMode(bean.getResultMode());
		return page;
	}
}
