
Oracle | 给表和字段添加注释
  comment  on  column  表名.字段名   is  '注释内容';
  comment on table 表名  is  '注释内容';

Oracle | 创建自增字段 SEQUENCE
	CREATE SEQUENCE EMPLOYEE_AUTOINC
	MINVALUE 1
	MAXVALUE 9999999999999999
	START WITH 1
	INCREMENT BY 1
	NOCACHE;
  
Oracle | 查看序列：
  SELECT SEQ_XX.NEXTVAL FROM DUAL;
  
Oracle | 删除序列：
  DROP SEQUENCE seq_xx;
  
Oracle | 创建触发器：
  CREATE OR REPLACE TRIGGER INSERT_EMPLOYEE_AUTOINC
  BEFORE INSERT ON EMPLOYEE    --before:执行DML等操作之前触发
  FOR EACH ROW   --行级触发器
  BEGIN
  SELECT EMPLOYEE_AUTOINC.NEXTVAL INTO :NEW.ID FROM DUAL;
  END INSERT_EMPLOYEE_AUTOINC;
 
  触发时机：
  before：能够防止某些错误操作发生而便于回滚或实现某些业务规则，适用于实现自增字段；
  after：在DML等操作发生之后发生，这种方式便于记录该操作或做某些事后处理信息；

遇到插入数据的外键问题
--关闭所有外键
SELECT 'alter table  '|| t.table_name  || ' disable constraint ' || t.CONSTRAINT_NAME || ';'
FROM USER_CONSTRAINTS t WHERE t.CONSTRAINT_TYPE = 'R'; 
--开启所有外键
SELECT 'alter table  '|| t.table_name || ' enable constraint ' || t.CONSTRAINT_NAME || ';' 
FROM USER_CONSTRAINTS t WHERE t.CONSTRAINT_TYPE = 'R';


1 oracle之索引篇
1.1 索引概述
索引的特点
1	索引在磁盘上独立存放的
索引是独立的对象，拥有自己的存储空间。两个索引之间是没有关系，好比字典的拼音索引和部首索引，在编排和使用时都是相互独立的 。
2	索引和表之间是如何关联的
索引中保存：索引的键值（索引列的值）；数据在表中的地址（rowid）。
查字典时，根据拼音索引可以找到某个字的页码然后直接到该页查看详细内容。Oracle索引与查字典也很类似，如果要找userid=10的数据，那么就到userid索引中先找到目标数据的地址（rowid），然后根据数据地址到表中查看目标数据的详情。
那么，如果要找username=’abc’的数据呢，userid的索引就不好用了，需要使用username的索引了。
3	索引中不包含空的键值
索引中不包含空的键值。例如，对于username索引，如果某条数据的username是空，那么索引中就没有这条数据。这个特性也告诉我们，查找空的键值是不能走索引的。比如，如果想找username为空的数据，那么是不能使用username索引的，因为该索引中根本不包含这种数据。
4	索引的层高不会太高
对于200多万数据的表，索引的层高只有3，为什么这么小呢？
一个索引块大概能存放400个左右的数据。当索引只有1层时，可以保存400条数据。因为每个索引数据都有一个指向子节点的指针。所以当索引有3层时，最大可以容纳400*400*400=6400万条数据。如果索引是4层，就可以容纳上百亿的数据了。所以索引树的层级不会太高。
为什么一个数据块只能存放大约40条数据，而一个索引块却可以存放400条数据。那是因为一条数据的长度比一个索引键值的长度大的多。
如果一个索引键值也很长呢，例如在一个description列上建索引，那么一个索引块就只能存放几条数据，导致索引的层高增长很快，从而导致索引查询效率低。所以不建议在长度很大的列上创建索引。
索引的扫描一般是从根节点扫描到叶子节点，索引的层高对索引的扫描效率有很大影响。
5	 索引占的数据块比较少
因为索引单条数据的长度比表单条数据的长度要小得多。所以索引占的空间比表要小得多。
当然，这也不是绝对的。当表中的列比较少时，索引和表占的空间也可能是差不多的。而且一个表上索引可能有多个，索引占的总空间可能不比表的空间小。所以我们在分配表空间时，索引和表的表空间一般也需要分配差不多的大小。
6	每个键值占的叶子的块数
如果一个键值的重复度很高，使用这个索引查询的效率就可能很低。前面讲过，索引高度决定了从根节点到叶子节点要查询几个索引块。而键值的重复度决定了要查询多少个叶子块。一个是纵向查询，一个是横向查询。 
             重要知识点
索引中不包含空的键值，一般不能根据索引查询空值。
索引每层能容纳的数据随层高增大呈指数级增加，所以索引的层高不会很大。
不建议在长度很大的列或者很多字段的组合索引上创建索引，这样的索引树会很高，查询效率很低。
索引占的数据块一般比表少的多，如果一个索引大部分都是空值，那么它占的索引空间就会非常小。
如果索引键值的重复度很高，那么查询效率可能比较低。
当要查询的键值对应很多个数据块时，查询的效率比较低。

2 执行计划——基础篇
2.1 执行计划概述
执行计划是Oracle优化器在执行SQL时选择的执行方案。SQL语句是非过程性的语言，它只说明需要取哪些数据，但是没有说明如何去取这些数据。对于一个SQL语句，可以使用的取数据方式有很多种，所以需要优化器来选择使用哪种方式。每一种取数据的方式就是一种执行计划。优化器在分析SQL的过程中会考虑各个表的数据量以及数据分布，因此理论上可以获得最优的执行计划。
数据访问路径
ORACLE访问数据的三种存取方法：全表扫描、通过ROWID存取、索引扫描（索引唯一扫描、索引范围扫描、索引全扫描、索引快速扫描）。
2.1.1 全表扫描（TABLE ACCESS FULL）
全表扫描是数据库服务器用来搜寻表的每一条记录的过程，直到所有符合给定条件的记录返回为止（全表扫描需要检索这个表所占的全部空间（即我们说的高水位），并不是按照数据条数来扫描）。
使用条件：取出数据的比较多，超过总量的5% -- 10%。这个数不是绝对的，这里只是一个经验值。当表中数据量较少时,全表扫描和索引扫描的效率差可以忽略,此时随便走什么扫描都可以的。
select /*+full(a)*/count(*) from t_userserviceinfo a
/*+full(a)*/是全表扫描的提示，表示告诉优化器对a表使用全表扫描的访问路径，其中a是表的别名。
 
怎么读取执行计划：
查看执行计划的基本原则可以总结为：从右往左，从下往上。
Operation：操作；
Name：操作的对象；
Cost :Oracle计算出来的执行该操作的代价；
Cardinality:表示预期从一个行源返回的记录数；
Bytes:Oracle估算当前操作的影响的数据量（单位byte）
执行计划里的各指标值都是越小越好。
上面是最简单的一个执行计划，它只有三步。它的执行顺序是从内到外的，即1->2->3。TABLE ACCESS FULL表示这一步是对表T_USERSERVICEINFO做全表扫描；SORT AGGREGATE表示对上一步结果执行count，注意这里的SORT不表示排序，而是集函数的意思；SELECT STATEMENT表示这是一个查询语句。
2.1.2 通过ROWID存取（Table Access by ROWID或rowid lookup）
rowid对访问一个表中的给定的行提供了最快的访问方法，通过ROWID可以直接定位到相应的数据块上，然后将其读到内存。我们创建一个索引时，该索引不但存储索引列的值，而且也存储索引值所对应的行的ROWID，这样我们通过索引快速找到相应行的ROWID后，通过该ROWID，就可以迅速将数据查询出来。这也就是我们使用索引查询时，速度比较快的原因。
为了通过ROWID存取表，Oracle 首先要获取被选择行的ROWID，或者从语句的WHERE子句中得到，或者通过表的一个或多个索引的索引扫描得到。Oracle然后以得到的ROWID为依据定位每个被选择的行。 
使用条件：由于数据库的备份还原后数据的rowid会发生变化，所以在我们系统一般不使用rowid进行存取。但有一种情况可以使用，先查询出一批数据的rowid，后期做一些很复杂的判断后对满足条件的进行更新时，可以根据前期的rowid进行更新（可以参见f_corp_di_rollbackuseropen、f_user_di_syncnumberout）。
使用ROWID存取的例子： 
select /*+ROWID(a)*/*from t_userserviceinfo a where rowid = '1'
 

2.1.3 索引唯一扫描（INDEX UNIQUE SCAN）
	通过唯一索引查找一个数值返回单个ROWID。
	使用条件：当根据主键或唯一索引存在UNIQUE 或PRIMARY KEY 约束）查询数据时，查询条件中使用了该索引的所有列，可以使用索引唯一扫描。这种查询的代价非常小，因为它最多从索引树中查出一条数据。对于组合索引，如果查询条件中仅使用了该索引的部分列，则不会使用索引唯一扫描。
	select /*+index(a PK_T_USERSERVICEINFO)*/count(*) from t_userserviceinfo a where phonenumber = '674977819';
	 
/*+index(a PK_T_USERSERVICEINFO)*/这个提示表示强制指定某个索引，PK_T_USERSERVICEINFO是要使用的索引名，a是表的别名。
索引唯一扫描一般比全表扫描的效率高的多，因为索引唯一扫描只需要访问几个块，而全表扫描可能需要访问上万个块。
当表非常小时，两者的查询效率就差不多了，此时也就不用关注性能差异了。
2.1.4 索引范围扫描（INDEX RANGE SCAN）
索引范围扫描跟索引唯一扫描类似，从根节点一直扫描到叶子节点，每一层（不包括叶子节点）扫描一个索引块。它们的区别是，索引唯一扫描在叶子块里最多只能找到一条目标数据，而索引范围扫描可能找到N条目标数据（N>=0）(通过索引查找一个数值经常返回多个记录)。由此可见，索引唯一扫描实际是索引范围扫描的一个特例。
使用条件：使用index rang scan的3种情况： 
1、在唯一索引列上使用了range操作符(>  <  <>  >=  <=  between) 
select * from t_userserviceinfo a where a.userservid > 1
 
2、在组合索引上，只使用部分列进行查询，导致查询出多行 
	select /*+index(a IX_T_USERSERV_SERVSTATUS)*/count(*) from t_userserviceinfo a where SERVSTATUS = 1;
 
3、对非唯一索引列上进行的任何查询。 
select userservid from t_userserviceinfo a where a.createtime = sysdate
 
归纳下，索引范围扫描的使用场景如下表所示，其中username列有非唯一索引，phonenumber列上有唯一索引，userid和servicetype上有主键（组合索引）。
 				场景	           查询条件举例	          说明
可以使用索引范围扫描场景	对非唯一索引的等值查询	username =’abc’	 
	                  对非唯一索引的范围查询	  username >’abc’	 
			  对非唯一索引的模糊查询	  username like ’abc%’	       必须是前匹配，如果是全模糊，则无法使用索引范围扫描
			  对唯一索引的范围查询	   phonenumber>’123’	 
			  对唯一索引的模糊查询	   phonenumber like ’123%’	必须是前匹配
			  对唯一索引使用前导列查询	 userid=123	               userid是组合索引的第一个列
不可以使用索引范围扫描场景  非前匹配的模糊查询	 username like ’%abc’
						   username like ’%abc%’	 
			  查询列上有表达式	    username || ‘’ = ’abc’
						   userid +0=123
						   to_number(phonenumber)= 123	 
			  查询列上有隐式转换	    phonenumber=123	等价于to_number(phonenumber)= 123
			  查询空值	                 phonenumber is null	 
			  使用组合索引但未使用前导列	servicetype=1	userid和servicetype上有索引
			  使用不等于                userid<>123	 

2.1.5 索引全扫描（INDEX FULL SCAN）
索引全扫描一般会扫描所有叶子节点。它从第一个叶子节点开始扫描，通过叶子节点的链接依次访问每一个叶子节点。
	索引全扫描有以下几个特点：
（1）由于叶子节点是有序的，所以扫描结果也是有序的。
（2）由于叶子块之间是指针关联的，所以对叶子块只能使用单块读。
（3）如果需要访问表，由于每一条数据都需要使用rowid访问，它的效率比全表扫描低的多。
前面说过，索引范围扫描可能只访问一个叶子块也可能访问很多叶子块。那么，最坏情况下，索引范围扫描也可能需要访问所有叶子块，此时它的效果和索引全扫描是一样的，所以可以认为索引全扫描是索引范围扫描的一种极端情况。
使用条件： 一般使用全索引扫描是不好的，但当查询TOPN数据（rownum < 5）或使用（min、max）时可以使用。或需要对数据进行排序且排序字段为索引字段时。
全索引扫描的例子： 
select * from t_userserviceinfo a order by a.createtime
 
 
要高效地执行包含min与max函数的查询，对B索引来说有两个特定的操作可用。第一个是index full scan(min/max)，当查询不指定范围条件使用。尽管执行计划显示为索引全扫描，不过，优化器实际上并不进行索引全扫描，仅查询最右或者最左的索引键。
当两个函数(min与max)同时在一个查询使用的时候该优化技术就不在适用了。这样的情况下，优化器选择了索引全扫描
select max(t.userservid) from t_userserviceinfo t 
2.1.6 索引快速全扫描（INDEX FAST FULL SCAN）
	扫描索引中的所有的数据块，与 index full scan很类似，但是一个显著的区别就是它不对查询出的数据进行排序，因为索引快速全扫描时Oracle是根据索引行在磁盘上的物理存储顺序来扫描，而不是根据索引树的指针顺序来扫描的，即数据不是以排序顺序被返回。它的性能一般也优于索引全扫描，因为它支持多块读，而索引全扫描不支持；它的性能不一定有索引范围扫描好，更没有索引唯一扫描好，因为它毕竟要访问所有索引块。
所以，索引快速全扫描只是在某些场景下替代全表扫描使用。
使用场景：需要扫描的所有字段均在索引中。且字段值不能为null
索引快速扫描的例子：
select /*+index_ffs(a ix_userserviceinfo_createtime)*/  count(*) from t_userserviceinfo a（注意createtime不可以为空才可以使用）
 
select /*+index_ffs(a ix_userserviceinfo_createtime)*/  createtime from t_userserviceinfo a
 
 若查询字段在多个索引中，可以使用组合索引的方式：
select /*+ index_join(a pk_t_fulltonelib ,ix_fulltonelib_spid ) */ 
a.toneid, a.spid from t_fulltonelib a;
 

